generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Rooms {
  id              Int          @id @default(autoincrement())
  name            String       @unique
  description     String
  capacity        Int
  type            String
  open            Boolean
  handicap_access Boolean
  screenings      Screenings[]

  @@map(name: "ROOMS")
}

model Users {
  id           Int            @id @default(autoincrement())
  first_name   String
  last_name    String
  email        String         @unique
  password     String
  money        Int            @default(0)
  role         Int            @default(1)
  token        String?
  tickets      Tickets[]
  superTickets SuperTickets[]

  @@map(name: "USERS")
}

model Categories {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  movies Movies[]

  @@map(name: "CATEGORIES")
}

model Movies {
  id           Int          @id @default(autoincrement())
  title        String       @unique
  author       String
  release_date DateTime     @db.Date
  description  String
  status       String
  duration     Int
  category_id  Int
  category     Categories   @relation(fields: [category_id], references: [id])
  screenings   Screenings[]

  @@map(name: "MOVIES")
}

model Screenings {
  id                         Int                    @id @default(autoincrement())
  start_time                 DateTime
  end_time                   DateTime
  screening_duration_minutes Int
  movie_id                   Int
  movie                      Movies                 @relation(fields: [movie_id], references: [id])
  room_id                    Int
  room                       Rooms                  @relation(fields: [room_id], references: [id])
  tickets                    Tickets[]
  superTicketsSessions       SuperTicketsSessions[]

  @@unique([start_time, room_id])
  @@map(name: "SCREENINGS")
}

model Employees {
  id             Int              @id @default(autoincrement())
  first_name     String
  last_name      String
  email          String           @unique
  password       String
  phone_number   String
  token          String?
  role           Int              @default(2)
  working_shifts Working_shifts[]

  @@map(name: "EMPLOYEES")
}

model Working_shifts {
  id          Int       @id @default(autoincrement())
  start_time  DateTime
  end_time    DateTime
  position    String
  employee_id Int
  employee    Employees @relation(fields: [employee_id], references: [id])

  @@map(name: "WORKING_SHIFTS")
}

model Tickets {
  id           Int        @id @default(autoincrement())
  used         Boolean    @default(false)
  seat         Int
  price        Int
  user_id      Int?
  user         Users?     @relation(fields: [user_id], references: [id])
  screening_id Int
  screening    Screenings @relation(fields: [screening_id], references: [id])
  acquired_at  DateTime?

  @@unique([screening_id, seat])
  @@map(name: "TICKETS")
}

model SuperTickets {
  id       Int                    @id @default(autoincrement())
  price    Int
  uses     Int
  user_id  Int?
  user     Users?                 @relation(fields: [user_id], references: [id])
  sessions SuperTicketsSessions[]

  @@map(name: "SUPER_TICKETS")
}

model SuperTicketsSessions {
  used            Boolean      @default(false)
  seat            Int
  original_price  Int
  super_ticket_id Int
  super_ticket    SuperTickets @relation(fields: [super_ticket_id], references: [id])
  screening_id    Int
  screening       Screenings   @relation(fields: [screening_id], references: [id])

  @@id([super_ticket_id, screening_id])
  @@map(name: "SUPER_TICKETS_SESSIONS")
}
